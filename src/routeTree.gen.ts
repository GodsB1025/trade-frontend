/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as UserRouteImport } from "./routes/user/route";
import { Route as IndexImport } from "./routes/index";
import { Route as UserIndexImport } from "./routes/user/index";
import { Route as TermsIndexImport } from "./routes/terms/index";
import { Route as SupportIndexImport } from "./routes/support/index";
import { Route as StatisticsIndexImport } from "./routes/statistics/index";
import { Route as RegulationsIndexImport } from "./routes/regulations/index";
import { Route as PrivacyIndexImport } from "./routes/privacy/index";
import { Route as PopularHscodesIndexImport } from "./routes/popular-hscodes/index";
import { Route as NewsIndexImport } from "./routes/news/index";
import { Route as HelpIndexImport } from "./routes/help/index";
import { Route as CountryInfoIndexImport } from "./routes/country-info/index";
import { Route as UserProfileIndexImport } from "./routes/user/profile/index";
import { Route as UserBookmarksIndexImport } from "./routes/user/bookmarks/index";
import { Route as HscodeHscodeIndexImport } from "./routes/hscode/$hscode/index";

// Create/Update Routes

const UserRouteRoute = UserRouteImport.update({
  id: "/user",
  path: "/user",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const UserIndexRoute = UserIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => UserRouteRoute,
} as any);

const TermsIndexRoute = TermsIndexImport.update({
  id: "/terms/",
  path: "/terms/",
  getParentRoute: () => rootRoute,
} as any);

const SupportIndexRoute = SupportIndexImport.update({
  id: "/support/",
  path: "/support/",
  getParentRoute: () => rootRoute,
} as any);

const StatisticsIndexRoute = StatisticsIndexImport.update({
  id: "/statistics/",
  path: "/statistics/",
  getParentRoute: () => rootRoute,
} as any);

const RegulationsIndexRoute = RegulationsIndexImport.update({
  id: "/regulations/",
  path: "/regulations/",
  getParentRoute: () => rootRoute,
} as any);

const PrivacyIndexRoute = PrivacyIndexImport.update({
  id: "/privacy/",
  path: "/privacy/",
  getParentRoute: () => rootRoute,
} as any);

const PopularHscodesIndexRoute = PopularHscodesIndexImport.update({
  id: "/popular-hscodes/",
  path: "/popular-hscodes/",
  getParentRoute: () => rootRoute,
} as any);

const NewsIndexRoute = NewsIndexImport.update({
  id: "/news/",
  path: "/news/",
  getParentRoute: () => rootRoute,
} as any);

const HelpIndexRoute = HelpIndexImport.update({
  id: "/help/",
  path: "/help/",
  getParentRoute: () => rootRoute,
} as any);

const CountryInfoIndexRoute = CountryInfoIndexImport.update({
  id: "/country-info/",
  path: "/country-info/",
  getParentRoute: () => rootRoute,
} as any);

const UserProfileIndexRoute = UserProfileIndexImport.update({
  id: "/profile/",
  path: "/profile/",
  getParentRoute: () => UserRouteRoute,
} as any);

const UserBookmarksIndexRoute = UserBookmarksIndexImport.update({
  id: "/bookmarks/",
  path: "/bookmarks/",
  getParentRoute: () => UserRouteRoute,
} as any);

const HscodeHscodeIndexRoute = HscodeHscodeIndexImport.update({
  id: "/hscode/$hscode/",
  path: "/hscode/$hscode/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/user": {
      id: "/user";
      path: "/user";
      fullPath: "/user";
      preLoaderRoute: typeof UserRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/country-info/": {
      id: "/country-info/";
      path: "/country-info";
      fullPath: "/country-info";
      preLoaderRoute: typeof CountryInfoIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/help/": {
      id: "/help/";
      path: "/help";
      fullPath: "/help";
      preLoaderRoute: typeof HelpIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/news/": {
      id: "/news/";
      path: "/news";
      fullPath: "/news";
      preLoaderRoute: typeof NewsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/popular-hscodes/": {
      id: "/popular-hscodes/";
      path: "/popular-hscodes";
      fullPath: "/popular-hscodes";
      preLoaderRoute: typeof PopularHscodesIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/privacy/": {
      id: "/privacy/";
      path: "/privacy";
      fullPath: "/privacy";
      preLoaderRoute: typeof PrivacyIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/regulations/": {
      id: "/regulations/";
      path: "/regulations";
      fullPath: "/regulations";
      preLoaderRoute: typeof RegulationsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/statistics/": {
      id: "/statistics/";
      path: "/statistics";
      fullPath: "/statistics";
      preLoaderRoute: typeof StatisticsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/support/": {
      id: "/support/";
      path: "/support";
      fullPath: "/support";
      preLoaderRoute: typeof SupportIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/terms/": {
      id: "/terms/";
      path: "/terms";
      fullPath: "/terms";
      preLoaderRoute: typeof TermsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/user/": {
      id: "/user/";
      path: "/";
      fullPath: "/user/";
      preLoaderRoute: typeof UserIndexImport;
      parentRoute: typeof UserRouteImport;
    };
    "/hscode/$hscode/": {
      id: "/hscode/$hscode/";
      path: "/hscode/$hscode";
      fullPath: "/hscode/$hscode";
      preLoaderRoute: typeof HscodeHscodeIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/user/bookmarks/": {
      id: "/user/bookmarks/";
      path: "/bookmarks";
      fullPath: "/user/bookmarks";
      preLoaderRoute: typeof UserBookmarksIndexImport;
      parentRoute: typeof UserRouteImport;
    };
    "/user/profile/": {
      id: "/user/profile/";
      path: "/profile";
      fullPath: "/user/profile";
      preLoaderRoute: typeof UserProfileIndexImport;
      parentRoute: typeof UserRouteImport;
    };
  }
}

// Create and export the route tree

interface UserRouteRouteChildren {
  UserIndexRoute: typeof UserIndexRoute;
  UserBookmarksIndexRoute: typeof UserBookmarksIndexRoute;
  UserProfileIndexRoute: typeof UserProfileIndexRoute;
}

const UserRouteRouteChildren: UserRouteRouteChildren = {
  UserIndexRoute: UserIndexRoute,
  UserBookmarksIndexRoute: UserBookmarksIndexRoute,
  UserProfileIndexRoute: UserProfileIndexRoute,
};

const UserRouteRouteWithChildren = UserRouteRoute._addFileChildren(
  UserRouteRouteChildren,
);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/user": typeof UserRouteRouteWithChildren;
  "/country-info": typeof CountryInfoIndexRoute;
  "/help": typeof HelpIndexRoute;
  "/news": typeof NewsIndexRoute;
  "/popular-hscodes": typeof PopularHscodesIndexRoute;
  "/privacy": typeof PrivacyIndexRoute;
  "/regulations": typeof RegulationsIndexRoute;
  "/statistics": typeof StatisticsIndexRoute;
  "/support": typeof SupportIndexRoute;
  "/terms": typeof TermsIndexRoute;
  "/user/": typeof UserIndexRoute;
  "/hscode/$hscode": typeof HscodeHscodeIndexRoute;
  "/user/bookmarks": typeof UserBookmarksIndexRoute;
  "/user/profile": typeof UserProfileIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/country-info": typeof CountryInfoIndexRoute;
  "/help": typeof HelpIndexRoute;
  "/news": typeof NewsIndexRoute;
  "/popular-hscodes": typeof PopularHscodesIndexRoute;
  "/privacy": typeof PrivacyIndexRoute;
  "/regulations": typeof RegulationsIndexRoute;
  "/statistics": typeof StatisticsIndexRoute;
  "/support": typeof SupportIndexRoute;
  "/terms": typeof TermsIndexRoute;
  "/user": typeof UserIndexRoute;
  "/hscode/$hscode": typeof HscodeHscodeIndexRoute;
  "/user/bookmarks": typeof UserBookmarksIndexRoute;
  "/user/profile": typeof UserProfileIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/user": typeof UserRouteRouteWithChildren;
  "/country-info/": typeof CountryInfoIndexRoute;
  "/help/": typeof HelpIndexRoute;
  "/news/": typeof NewsIndexRoute;
  "/popular-hscodes/": typeof PopularHscodesIndexRoute;
  "/privacy/": typeof PrivacyIndexRoute;
  "/regulations/": typeof RegulationsIndexRoute;
  "/statistics/": typeof StatisticsIndexRoute;
  "/support/": typeof SupportIndexRoute;
  "/terms/": typeof TermsIndexRoute;
  "/user/": typeof UserIndexRoute;
  "/hscode/$hscode/": typeof HscodeHscodeIndexRoute;
  "/user/bookmarks/": typeof UserBookmarksIndexRoute;
  "/user/profile/": typeof UserProfileIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/user"
    | "/country-info"
    | "/help"
    | "/news"
    | "/popular-hscodes"
    | "/privacy"
    | "/regulations"
    | "/statistics"
    | "/support"
    | "/terms"
    | "/user/"
    | "/hscode/$hscode"
    | "/user/bookmarks"
    | "/user/profile";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/country-info"
    | "/help"
    | "/news"
    | "/popular-hscodes"
    | "/privacy"
    | "/regulations"
    | "/statistics"
    | "/support"
    | "/terms"
    | "/user"
    | "/hscode/$hscode"
    | "/user/bookmarks"
    | "/user/profile";
  id:
    | "__root__"
    | "/"
    | "/user"
    | "/country-info/"
    | "/help/"
    | "/news/"
    | "/popular-hscodes/"
    | "/privacy/"
    | "/regulations/"
    | "/statistics/"
    | "/support/"
    | "/terms/"
    | "/user/"
    | "/hscode/$hscode/"
    | "/user/bookmarks/"
    | "/user/profile/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  UserRouteRoute: typeof UserRouteRouteWithChildren;
  CountryInfoIndexRoute: typeof CountryInfoIndexRoute;
  HelpIndexRoute: typeof HelpIndexRoute;
  NewsIndexRoute: typeof NewsIndexRoute;
  PopularHscodesIndexRoute: typeof PopularHscodesIndexRoute;
  PrivacyIndexRoute: typeof PrivacyIndexRoute;
  RegulationsIndexRoute: typeof RegulationsIndexRoute;
  StatisticsIndexRoute: typeof StatisticsIndexRoute;
  SupportIndexRoute: typeof SupportIndexRoute;
  TermsIndexRoute: typeof TermsIndexRoute;
  HscodeHscodeIndexRoute: typeof HscodeHscodeIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserRouteRoute: UserRouteRouteWithChildren,
  CountryInfoIndexRoute: CountryInfoIndexRoute,
  HelpIndexRoute: HelpIndexRoute,
  NewsIndexRoute: NewsIndexRoute,
  PopularHscodesIndexRoute: PopularHscodesIndexRoute,
  PrivacyIndexRoute: PrivacyIndexRoute,
  RegulationsIndexRoute: RegulationsIndexRoute,
  StatisticsIndexRoute: StatisticsIndexRoute,
  SupportIndexRoute: SupportIndexRoute,
  TermsIndexRoute: TermsIndexRoute,
  HscodeHscodeIndexRoute: HscodeHscodeIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/user",
        "/country-info/",
        "/help/",
        "/news/",
        "/popular-hscodes/",
        "/privacy/",
        "/regulations/",
        "/statistics/",
        "/support/",
        "/terms/",
        "/hscode/$hscode/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/user": {
      "filePath": "user/route.tsx",
      "children": [
        "/user/",
        "/user/bookmarks/",
        "/user/profile/"
      ]
    },
    "/country-info/": {
      "filePath": "country-info/index.tsx"
    },
    "/help/": {
      "filePath": "help/index.tsx"
    },
    "/news/": {
      "filePath": "news/index.tsx"
    },
    "/popular-hscodes/": {
      "filePath": "popular-hscodes/index.tsx"
    },
    "/privacy/": {
      "filePath": "privacy/index.tsx"
    },
    "/regulations/": {
      "filePath": "regulations/index.tsx"
    },
    "/statistics/": {
      "filePath": "statistics/index.tsx"
    },
    "/support/": {
      "filePath": "support/index.tsx"
    },
    "/terms/": {
      "filePath": "terms/index.tsx"
    },
    "/user/": {
      "filePath": "user/index.tsx",
      "parent": "/user"
    },
    "/hscode/$hscode/": {
      "filePath": "hscode/$hscode/index.tsx"
    },
    "/user/bookmarks/": {
      "filePath": "user/bookmarks/index.tsx",
      "parent": "/user"
    },
    "/user/profile/": {
      "filePath": "user/profile/index.tsx",
      "parent": "/user"
    }
  }
}
ROUTE_MANIFEST_END */
