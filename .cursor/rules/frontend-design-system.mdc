---
description: 
globs: *tsx
alwaysApply: false
---
---
description: Frontend Design System - 논리적 가이드라인 및 Shadcn/UI 컴포넌트 활용 지침
alwaysApply: false
---

# 🎨 Frontend Design System - 논리적 가이드라인

## 🚫 절대 원칙 (위반 금지)

### 색상 시스템 보호
- styles.css @theme에 정의된 커스텀 컬러만 사용
- 하드코딩된 색상값 사용 절대 금지
- 브랜드 일관성을 위해 정의된 색상 팔레트 엄수

### 스타일 시스템 보호  
- 기존 Shadcn/UI 컴포넌트의 기본 스타일 변경 금지
- 일관된 간격 시스템 유지
- 타이포그래피 계층 구조 준수

## 🧠 UI 구조 의사결정 트리

### 1단계: 페이지 레이아웃 결정
**질문**: 이 페이지의 주요 목적은 무엇인가?

- **정보 대시보드** → 사이드바 포함 레이아웃 선택
- **데이터 분석/테이블 중심** → 풀 위드스 레이아웃 선택  
- **폼/상세보기/단일 작업** → 중앙 정렬 레이아웃 선택

### 2단계: 콘텐츠 구조 결정
**질문**: 표시할 데이터의 성격은 무엇인가?

- **제목이 있고 복합적인 정보** → Card 기반 구조
- **균등한 크기의 여러 항목** → Grid 기반 구조
- **구조화된 대량 데이터** → Table 기반 구조
- **순차적이고 유사한 항목들** → List 기반 구조

### 3단계: Shadcn 컴포넌트 선택
**질문**: 기능적 요구사항은 무엇인가?

#### 데이터 표시용
- **Card**: 복합 정보 그룹핑 필요시
- **Badge**: 상태/카테고리 표시 필요시  
- **Avatar**: 사용자 정보 표시 필요시
- **Progress**: 진행률 표시 필요시

#### 사용자 입력용
- **Button**: 액션 트리거 필요시
- **Input/Textarea**: 텍스트 입력 필요시
- **Select**: 옵션 선택 필요시
- **Checkbox/Radio**: 다중/단일 선택 필요시
- **Switch**: 토글 기능 필요시

#### 인터랙션용
- **Dialog**: 모달 인터랙션 필요시
- **Sheet**: 사이드 패널 필요시
- **Popover**: 추가 정보 표시 필요시
- **Tooltip**: 간단한 도움말 필요시
- **Dropdown Menu**: 액션 메뉴 필요시

#### 네비게이션용
- **Tabs**: 섹션 분할 필요시
- **Pagination**: 페이지 분할 필요시
- **Breadcrumb**: 경로 표시 필요시

## 🎨 디자인 시스템 가이드라인

### 색상 선택 논리
**질문**: 이 요소의 의미적 역할은 무엇인가?

- **브랜드 정체성 표현** → brand-* 색상 팔레트 사용
- **기본 UI 요소** → primary-* 색상 팔레트 사용
- **중립적 정보** → neutral-* 색상 팔레트 사용
- **성공 피드백** → success-* 색상 팔레트 사용
- **경고 메시지** → warning-* 색상 팔레트 사용
- **오류/위험** → danger-* 색상 팔레트 사용
- **정보 전달** → info-* 색상 팔레트 사용

### 타이포그래피 선택 논리
**질문**: 이 텍스트의 정보 계층은 어디인가?

- **최상위 제목** → text-lg + font-semibold + text-neutral-800
- **섹션 제목** → font-semibold + text-neutral-800  
- **일반 본문** → text-sm + text-neutral-600
- **부가 정보** → text-xs + text-neutral-500
- **비활성 정보** → text-xs + text-neutral-400

### 간격 시스템 논리
**질문**: 요소들 간의 관계성은 어떠한가?

- **강한 연관성** → 작은 간격 (gap-2, space-y-2)
- **중간 연관성** → 중간 간격 (gap-4, space-y-4) 
- **약한 연관성** → 큰 간격 (gap-6, space-y-6)
- **독립적 섹션** → 매우 큰 간격 (gap-8, space-y-8)

## 🔗 Shadcn 컴포넌트 활용 매핑

### 기존 디자인 패턴 → Shadcn 컴포넌트 매핑

#### ContentCard 패턴
- **Shadcn Card 컴포넌트 활용**
- CardHeader, CardTitle, CardContent 구조 사용
- 필터 버튼은 CardHeader 내 배치
- 더보기 링크는 Button variant="link" 사용

#### 그리드 패턴  
- **표준 Grid 레이아웃 + Shadcn Card**
- 각 그리드 아이템을 Card로 감싸기
- Badge 컴포넌트로 상태 표시
- Avatar 컴포넌트로 아이콘/이미지 표시

#### 테이블 패턴
- **Shadcn Table 컴포넌트 활용**  
- TableHeader, TableBody, TableRow, TableCell 구조
- Badge로 상태값 표시
- Button variant="ghost"로 액션 버튼 구현

#### 리스트 패턴
- **표준 div 구조 + Shadcn 보조 컴포넌트**
- Separator로 구분선 표시
- Badge로 카테고리 표시
- Button variant="link"로 링크 구현

### 인터랙션 요소 선택 가이드

#### 버튼 사용 논리
**질문**: 이 액션의 중요도와 성격은?

- **주요 액션** → Button variant="default"
- **보조 액션** → Button variant="outline" 
- **위험한 액션** → Button variant="destructive"
- **텍스트 링크** → Button variant="link"
- **미니멀 액션** → Button variant="ghost"

#### 피드백 요소 선택 논리  
**질문**: 어떤 종류의 피드백인가?

- **일시적 알림** → Toast 컴포넌트
- **중요한 확인** → Alert Dialog 컴포넌트
- **상태 정보** → Alert 컴포넌트
- **진행 상황** → Progress 컴포넌트
- **로딩 상태** → Skeleton 컴포넌트

## 📱 반응형 설계 원칙

### 화면 크기별 우선순위
**모바일 우선 설계 원칙**

- **모바일**: 핵심 정보와 주요 액션만 표시
- **태블릿**: 보조 정보와 필터 옵션 추가
- **데스크톱**: 전체 정보와 고급 기능 표시

### 컴포넌트 적응 전략
**질문**: 이 컴포넌트가 작은 화면에서 어떻게 동작해야 하는가?

- **테이블** → 모바일에서 Card 리스트로 변환
- **사이드바** → 모바일에서 Sheet 컴포넌트로 변환
- **복잡한 네비게이션** → 모바일에서 Dropdown Menu로 축약
- **상세 정보** → 모바일에서 Accordion으로 접기

## 💻 개발 컨벤션

### TypeScript 사용 원칙
- interface 대신 type 키워드 사용
- 컴포넌트 props는 명확한 타입 정의
- 함수형 프로그래밍 패턴 선호

### 컴포넌트 구조 원칙
- 단일 책임 원칙 준수
- props 인터페이스 명확히 정의
- children 패턴 적극 활용
- 재사용 가능한 구조 설계

### 한국어 코멘트 규칙
- 명사형 종결 사용
- 정중어법 사용 금지  
- 불필요한 콜론 사용 금지
- 기능과 목적 명확히 기술

## 🎯 실무 적용 체크리스트

### 새 컴포넌트 생성시
1. 이 컴포넌트의 목적이 명확한가?
2. 적절한 Shadcn 베이스 컴포넌트를 선택했는가?
3. 색상 시스템을 준수했는가?
4. 반응형 동작을 고려했는가?
5. 재사용 가능한 구조인가?

### 기존 컴포넌트 수정시
1. 기존 디자인 일관성을 유지하는가?
2. 다른 컴포넌트에 영향을 주지 않는가?
3. 접근성을 고려했는가?
4. 성능에 부정적 영향은 없는가?

### 레이아웃 설계시
1. 사용자의 주요 작업 흐름을 지원하는가?
2. 정보 계층이 명확한가?
3. 모바일에서도 사용성이 좋은가?
4. 확장 가능한 구조인가?

## 🚀 품질 보증 원칙

### 일관성 보장
- 같은 기능은 같은 컴포넌트 사용
- 색상과 간격의 일관된 적용
- 인터랙션 패턴의 통일성

### 확장성 고려
- 새로운 기능 추가시 기존 패턴 활용
- 컴포넌트의 조합 가능성 고려
- 미래 요구사항 변화 대응 가능성

### 사용자 경험 최적화
- 직관적인 인터페이스 설계
- 피드백의 적절성과 명확성
- 로딩과 오류 상태 고려

---

*이 가이드라인을 통해 논리적이고 일관성 있는 사용자 인터페이스를 구축하세요.*